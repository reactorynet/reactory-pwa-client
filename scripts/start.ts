'use strict';


import fs from 'fs';
import webpack, { Configuration } from 'webpack';
import WebpackDevServer from 'webpack-dev-server';

//const clearConsole = require('react-dev-utils/clearConsole');
import clearConsole from 'react-dev-utils/clearConsole';
import checkRequiredFiles from 'react-dev-utils/checkRequiredFiles';
import {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} from 'react-dev-utils/WebpackDevServerUtils';

import openBrowser from 'react-dev-utils/openBrowser';
import { paths } from '../config/paths';
import configFactory from '../webpack/webpack.config';
import { getWebpackDevServerConfiguration } from '../webpack/webpackDevServer.config';

console.log(`NODE_ENV ${process.env.NODE_ENV}`)

// require('../config/env');

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.

const onUnhandledError: NodeJS.UnhandledRejectionListener = (reason) => {
  console.error(`Reactory Development Server Start Failure:`, reason)  
  process.exit(-1);
}
 
process.on('unhandledRejection', onUnhandledError);

// Ensure environment variables are read.
const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  process.exit(1);
}

/**
 * Start function
 */
async function main() {        
  // Tools like Cloud9 rely on this.
  const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
  const HOST = process.env.HOST || '0.0.0.0';


  if (process.env.HOST) {
    console.log(`Attempting to bind to HOST environment variable: ${process.env.HOST}`)    
    console.log(`If this was unintentional, check that you haven't mistakenly set it in your shell.`);
    console.log(`Learn more here: 'https://bit.ly/CRA-advanced-config'}`);
    console.log();
  }

  // We require that you explicitly set browsers and do not fall back to
  // browserslist defaults.
  const { checkBrowsers } = require('react-dev-utils/browsersHelper');
  checkBrowsers(paths.appPath, isInteractive)
    .then(() => {
      // We attempt to use the default port but if it is busy, we offer the user to
      // run on a different port. `choosePort()` Promise resolves to the next free port.
      return choosePort(HOST, DEFAULT_PORT);
    })
    .then(port => {
      if (port == null) {
        // We have not found a port.
        return;
      }
      const config = configFactory('development');
      const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
      const appName = require(paths.appPackageJson).name;
      const useTypeScript = fs.existsSync(paths.appTsConfig);
      const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';
      const urls = prepareUrls(protocol, HOST, port);
      // const devSocket = {
      //   warnings: warnings =>
      //     devServer.sockWrite(devServer.sockets, 'warnings', warnings),
      //   errors: errors =>
      //     devServer.sockWrite(devServer.sockets, 'errors', errors),
      // };
      // Create a webpack compiler that is configured with custom messages.
      const compiler = createCompiler({
        appName,
        config,
       //devSocket,
        urls,
        useYarn,
        useTypeScript,
        //tscCompileOnError,
        webpack,
      });
      // Load proxy config
      const proxySetting = require(paths.appPackageJson).proxy;
      const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
      // Serve webpack assets generated by the compiler over a web server.
      const serverConfig = getWebpackDevServerConfiguration(
        proxyConfig,
        urls.lanUrlForConfig
      );
      const devServer = new WebpackDevServer(serverConfig, compiler);
      // Launch WebpackDevServer.
      devServer.start();

      ['SIGINT', 'SIGTERM'].forEach(function (sig) {
        process.on(sig, function () {
          devServer.close();
          process.exit();
        });
      });
    })
    .catch(err => {
      if (err && err.message) {
        console.log(err.message);
      }
      process.exit(1);
    });
}

main().then(()=>{  
});